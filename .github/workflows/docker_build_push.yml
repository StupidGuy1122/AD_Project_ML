name: CI/CD to Azure ACR with Docker Hub Cache + Python SAST

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. 释放磁盘空间
      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/lib/android
          docker system prune -af

      # 2. 拉取代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 3. 安装 Python 依赖 + SAST 工具
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest bandit

      # 4. 运行 Bandit 并生成 HTML 报告
      - name: Run Bandit (Python SAST)
        run: |
          mkdir -p sast-reports
          bandit -r . -f html -o sast-reports/bandit-report.html
        continue-on-error: true

      # 5. 运行 Semgrep 并生成 HTML 报告
      - name: Run Semgrep (Python SAST)
        run: |
          mkdir -p sast-reports
          semgrep --config auto --json > sast-reports/semgrep-report.json
          echo "<html><body><h2>Semgrep Report</h2><pre>" > sast-reports/semgrep-report.html
          cat sast-reports/semgrep-report.json | jq '.' >> sast-reports/semgrep-report.html
          echo "</pre></body></html>" >> sast-reports/semgrep-report.html
        continue-on-error: true

      # 6. 上传 Bandit HTML 报告
      - name: Upload Bandit HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-html-report
          path: sast-reports/bandit-report.html

      # 7. 上传 Semgrep HTML 报告
      - name: Upload Semgrep HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-html-report
          path: sast-reports/semgrep-report.html

      # 8. 运行pytest测试
      - name: Run pytest
        run: |
          mkdir -p test-reports
          pytest --junitxml=test-reports/report.xml
        continue-on-error: true

      # 9. 登录 Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 10. 登录 Azure ACR
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          registry: ${{ secrets.ACR_LOGIN_SERVER }}

      # 11. 拉取缓存镜像
      - name: Pull cache image from Docker Hub
        run: docker pull stupidguy/adprojectml:cache || echo "No cache image found, building from scratch"

      # 12. 构建并推送镜像
      - name: Build and push image
        run: |
          docker build \
            --cache-from=stupidguy/adprojectml:cache \
            -t ${{ secrets.ACR_LOGIN_SERVER }}/adprojectml:latest \
            -t stupidguy/adprojectml:cache .
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/adprojectml:latest
          docker push stupidguy/adprojectml:cache
