name: CI/CD to Azure ACR with Docker Hub Cache + Python SAST

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. 释放磁盘空间
      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/lib/android
          docker system prune -af

      # 2. 拉取代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 3. 安装 Python 依赖 + SAST 工具
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest bandit

      # 4. 运行 Bandit 并生成 HTML 报告
      - name: Run Bandit and generate styled HTML report
        run: |
          mkdir -p sast-reports
          bandit -r . -f json -o sast-reports/bandit.json

          echo "<html><head><style>
            body { font-family: Arial; padding: 20px; }
            h2 { color: #c0392b; }
            table { border-collapse: collapse; width: 100%; }
            th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
            .medium { background-color: #fff3cd; }
            .high { background-color: #f8d7da; }
          </style></head><body><h2>⚠️ Bandit 安全报告（中等级别及以上）</h2><table>
          <tr><th>文件</th><th>行号</th><th>问题</th><th>严重性</th><th>说明</th></tr>" > sast-reports/bandit-report.html

          cat sast-reports/bandit.json | jq -c '.results[]' | while read -r issue; do
            severity=$(echo "$issue" | jq -r '.issue_severity')
            if [[ "$severity" == "MEDIUM" || "$severity" == "HIGH" ]]; then
              file=$(echo "$issue" | jq -r '.filename')
              line=$(echo "$issue" | jq -r '.line_number')
              test_id=$(echo "$issue" | jq -r '.test_id')
              msg=$(echo "$issue" | jq -r '.issue_text')
              link=$(echo "$issue" | jq -r '.more_info')
              echo "<tr class=\"$severity\"><td>$file</td><td>$line</td><td><a href=\"$link\" target=\"_blank\">$test_id</a></td><td>$severity</td><td>$msg</td></tr>" >> sast-reports/bandit-report.html
            fi
          done

          echo "</table></body></html>" >> sast-reports/bandit-report.html
        continue-on-error: true


      # 5. 运行 Semgrep 并生成 HTML 报告
      - name: Run Semgrep and generate styled HTML report
        run: |
          mkdir -p sast-reports
          semgrep --config auto --json --output sast-reports/semgrep.json || echo '{"results":[]}' > sast-reports/semgrep.json

          echo "<html><head><style>
            body { font-family: Arial; padding: 20px; }
            h2 { color: #c0392b; }
            table { border-collapse: collapse; width: 100%; }
            th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
            .WARNING { background-color: #fff3cd; }
            .ERROR { background-color: #f8d7da; }
          </style></head><body><h2>⚠️ Semgrep 安全报告（WARNING 及以上）</h2><table>
          <tr><th>文件</th><th>行号</th><th>规则</th><th>等级</th><th>说明</th></tr>" > sast-reports/semgrep-report.html

          cat sast-reports/semgrep.json | jq -c '.results[]' | while read -r issue; do
            severity=$(echo "$issue" | jq -r '.extra.severity')
            if [[ "$severity" == "WARNING" || "$severity" == "ERROR" ]]; then
              file=$(echo "$issue" | jq -r '.path')
              line=$(echo "$issue" | jq -r '.start.line')
              rule=$(echo "$issue" | jq -r '.check_id')
              msg=$(echo "$issue" | jq -r '.extra.message')
              echo "<tr class=\"$severity\"><td>$file</td><td>$line</td><td>$rule</td><td>$severity</td><td>$msg</td></tr>" >> sast-reports/semgrep-report.html
            fi
          done

          echo "</table></body></html>" >> sast-reports/semgrep-report.html
        continue-on-error: true


      # 6. 上传 Bandit HTML 报告
      - name: Upload Bandit HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-html-report
          path: sast-reports/bandit-report.html

      # 7. 上传 Semgrep HTML 报告
      - name: Upload Semgrep HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-html-report
          path: sast-reports/semgrep-report.html

      # 8. 运行pytest测试
      - name: Run pytest
        run: |
          mkdir -p test-reports
          pytest --junitxml=test-reports/report.xml
        continue-on-error: true

      # 9. 登录 Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 10. 登录 Azure ACR
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          registry: ${{ secrets.ACR_LOGIN_SERVER }}

      # 11. 拉取缓存镜像
      - name: Pull cache image from Docker Hub
        run: docker pull stupidguy/adprojectml:cache || echo "No cache image found, building from scratch"

      # 12. 构建并推送镜像
      - name: Build and push image
        run: |
          docker build \
            --cache-from=stupidguy/adprojectml:cache \
            -t ${{ secrets.ACR_LOGIN_SERVER }}/adprojectml:latest \
            -t stupidguy/adprojectml:cache .
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/adprojectml:latest
          docker push stupidguy/adprojectml:cache
